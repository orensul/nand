CHIP ExtendAlu{
    IN x[16],y[16],instruction[9];
    OUT out[16],zr,ng;
     
    PARTS:


    
    // choose the correct shift command based on instruction[4..5]      
  
    Mux16(a = y, b = x, sel = instruction[4], out = toShift);
    ShiftLeft(in = toShift, out = SL);
    ShiftRight(in = toShift , out = SR);
    Mux16(a = SR, b = SL, sel = instruction[5], out = shiftOut); // Shifting result
        
    // Call ALU 
    ALU(x = x, y = y, zx = instruction[5], nx = instruction[4], 
       zy = instruction[3], ny = instruction[2], f = instruction[1], no = instruction[0], 
       out = ALUOut);

    // calc the multiplication of x,y
    Mul(a = x, b = y, out = outMul);
    
    // Change the result of ALU or it remains the same according to instruction[7..8]     
    Mux4Way16(a = outMul ,b = shiftOut ,c = outMul ,d = ALUOut , sel = instruction[7..8], out = out, out[0..7]=zer1, out[8..15]=zer2, out[15] = ng);

    
    // check if Resultout != 0, if so zr = false
    Or8Way(in = zer1, out = First8Bits);
    Or8Way(in = zer2, out = Last8Bits);
    Or(a = First8Bits, b = Last8Bits, out = isZero);
	Not(in = isZero, out = zr);
        
        
}
