// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise
    PARTS:

    // if zx == 1 then x = 0 else x = x
    Mux16(a = x, b = false, sel = zx, out = x1);   
    // find !x
    Not16(in = x1, out = notx1);  
    // if nx == 1 then x = !x
    Mux16(a = x1, b = notx1, sel = nx, out = x2);

    // if zy == 1 then y = 0 else y = y
    Mux16(a = y, b = false, sel = zy, out = y1);  
    // find !y
    Not16(in = y1, out = noty1); 
    // if ny == 1 then y = !y
    Mux16(a = y1, b = noty1, sel = ny, out = y2);

    // find x + y
    Add16(a = x2, b = y2, out = addxy);
    // find x & y
    And16(a = x2, b = y2, out = andxy);    
    // if f == 1 then x + y, else x & y
    Mux16(a = andxy, b = addxy, sel = f, out = result);
    
    // if no == 1, we should negate the result
    Not16(in = result, out = notresult);

    // if output == 0 then zr = 1 else zr = 0
    // if output < 0 then ng = 1 else 0
    Mux16(a = result, b = notresult, sel = no, out = out, out[0..7] = zr1, out[8..15] = zr2,out[15] = ng);
    
    Or8Way(in = zr1, out = or1);
    Or8Way(in = zr2, out = or2);
    Or(a = or1, b = or2, out = or3);
    Not(in = or3, out = zr);

    


}