// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // 000000000000000 to 011111111111111 = 0 to 16383 (Ram)
    // 100000000000000 to 101111111111111 = 16384 to 24575 (screen)
    // 110000000000000 = 24576 (keyboard)
    // address[13..14] = 11 -> keyboard, address[13..14] == 10 -> screen, address[13..14]
    // = 00 or 01 -> Ram (that's mean left most bit = 0 so it's Ram)

    // psuedo code:
    // if (address[14] == 0) LoadRam = true else LoadScreenOrKeyboard = true
    // if (address[13] == 0 && address[14] == 1) LoadScreen = true
    // call RAM16K with (in, LoadRam, address[0..13])-> out = RamOut
    // call Screen with (in, LoadScreen, address[0..12])-> out = ScreenOut
    // call Keyboard-> out = KeyboardOut
    // set out the correct out from the following options(RamOut,ScreenOut,KeyboardOut)
    // according to address two left most bits

    DMux(in = load, sel = address[14], a = LoadRam, b = LoadScreenOrKeyboard);
    Not(in = address[13], out = NotBit13Address);
    And(a = NotBit13Address, b = LoadScreenOrKeyboard, out = LoadScreen);

    RAM16K(in = in, load = LoadRam, address = address[0..13], out = RamOut);
    Screen(in = in, load = LoadScreen, address = address[0..12], out = ScreenOut);
    Keyboard(out = KeyboardOut);

    Mux4Way16(a = RamOut, b = RamOut, c = ScreenOut, d = KeyboardOut, sel = address[13..14], out = out);
}
