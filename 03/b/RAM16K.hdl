// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:

    // the address is of 14 bites:
    // the last 2 digits of the address points to one of the 4 groups of 4 registers each group

    DMux4Way(in = load, sel = address[12..13], a = loadGroupReg1, b = loadGroupReg2, c = loadGroupReg3 , d = loadGroupReg4);

    // call RAM4K to change the correct register in the group
    // we have 4 registers in the group we want to change and according to the
    // first 2 digits we determine which register to change
    // we have RAM4K which take care of change one register from 4 according to address

    RAM4K(in = in, load = loadGroupReg1, address = address[0..11], out = outloadGroupReg1);
    RAM4K(in = in, load = loadGroupReg2, address = address[0..11], out = outloadGroupReg2);
    RAM4K(in = in, load = loadGroupReg3, address = address[0..11], out = outloadGroupReg3);
    RAM4K(in = in, load = loadGroupReg4, address = address[0..11], out = outloadGroupReg4);

    // Now we want to 
    Mux4Way16(a = outloadGroupReg1, b = outloadGroupReg2, c = outloadGroupReg3, d = outloadGroupReg4,sel = address[12..13],
    out = out);
}
